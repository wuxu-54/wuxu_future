/**
 * 常量引用
 * 引用指向的内存无法修改值
 * 
 * 使用关键字const 在前面修饰 例如：const int& a = 1;
 * 常量引用比较特殊，他不是指向常量的指针常量，而是增加const修饰后，引用指向的内存地址的值变为【只读】无法修改。
 * 也就是无法作为变量去赋值。
 * 
 * 使用场景：修饰形参，防止误操作
*/

#include<iostream>
using namespace std;

int main(){
    int a = 1;
    const int&b = a;
    // b = 2; //这里报错，因为是常量引用，其值无法修改。

    //  int&c = 10;//这里报错，非常量引用的初始值必须是左值（变量），也就是引用必须得指向一块合法内存。10是个字面量，没有内存地址。
    
     const int a1=2;
    // int&c = a1;//这里报错，将 "int &" 类型的引用绑定到 "const int" 类型的初始值设定项时，限定符被丢弃，也就是引用不能指向 常量类型
     
     
     const int&c =10;//编译器将代码修改为 int c1= 10; const int& c = c1;  先创建个变量，申请了内存地址，然后引用在指向
}
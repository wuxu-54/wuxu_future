/**
 * 每个类成员分为成员变量和成员函数
 * 成员有静态和非静态之分，那么类的所占内存大小是怎么样的？
 * 
 * 答：
    * 1.空对象（类是空的）有独一无二的内存地址，且占一个字节大小。 
    * 为啥？因为空类对象也是一个实例，实例间需要相互区分，c++编译器会给每个空对象分配一个字节空间，起到占位作用，区分空对象占内存位置。
    * 
    * 2.非静态成员变量，属于类，计算类的内存时会算进去。静态成员变量、静态成员函数、非静态成员函数 都不属于类所在内存地址，在其他内存开辟地址
    * 3.非空对象，内存大小是 所有非静态成员变量的总内存。
    * 个人理解：非空类，其内存地址就会指向首个变量位置，大小为非静态成员变量的总内存。
 */

#include<iostream>
using namespace std;

class T{};

class T1{
    private:
    int i = 1;
};


int main(){
    T t = T();
    cout << "t:"<<sizeof(t)<<endl;//1字节，如果是空类的对象占1字节，是编译器给分配的

     T1 t1;
    cout << "t1:"<<sizeof(t1)<<endl;//4字节，非空类，那么内存按 非静态成员变量 总数计算
}